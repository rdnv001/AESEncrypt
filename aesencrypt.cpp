> üë§:
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/aes.h>
#include <iostream>
#include <fstream>
#include <cstring>
#include <unistd.h> // –¥–ª—è getopt –Ω–∞ Linux/Windows (MinGW –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)

const int KEY_LENGTH = 32;  // 256 –±–∏—Ç –¥–ª—è AES-256
const int IV_LENGTH = 16;   // 128 –±–∏—Ç –¥–ª—è IV (AES-128/256)

void handleErrors() {
    std::cerr << "Error occurred!" << std::endl;
    exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é OpenSSL (PBKDF2)
bool generateKey(const std::string& password, unsigned char* key, unsigned char* iv) {
    const unsigned char salt[] = "some_salt"; // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–æ–ª—å
    if (!PKCS5_PBKDF2_HMAC(password.c_str(), password.length(), salt, sizeof(salt), 10000, EVP_sha256(), KEY_LENGTH, key)) {
        return false;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ IV
    if (!RAND_bytes(iv, IV_LENGTH)) {
        return false;
    }

    return true;
}

// –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bool encrypt(const std::string& inputFile, const std::string& outputFile, const std::string& password) {
    unsigned char key[KEY_LENGTH], iv[IV_LENGTH];
    if (!generateKey(password, key, iv)) {
        handleErrors();
        return false;
    }

    std::ifstream ifs(inputFile, std::ios::binary);
    std::ofstream ofs(outputFile, std::ios::binary);

    if (!ifs || !ofs) {
        std::cerr << "Error opening files!" << std::endl;
        return false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–∞ AES-256-CBC
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx || !EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), nullptr, key, iv)) {
        handleErrors();
    }

    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    unsigned char buffer[1024];
    unsigned char ciphertext[1024 + EVP_CIPHER_block_size(EVP_aes_256_cbc())];
    int bytesRead, ciphertext_len;

    // –ó–∞–ø–∏—Å—å IV –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ)
    ofs.write((char*)iv, IV_LENGTH);

    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    while ((bytesRead = ifs.readsome((char*)buffer, sizeof(buffer))) > 0) {
        if (!EVP_EncryptUpdate(ctx, ciphertext, &ciphertext_len, buffer, bytesRead)) {
            handleErrors();
        }
        ofs.write((char*)ciphertext, ciphertext_len);
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    if (!EVP_EncryptFinal_ex(ctx, ciphertext, &ciphertext_len)) {
        handleErrors();
    }
    ofs.write((char*)ciphertext, ciphertext_len);

    EVP_CIPHER_CTX_free(ctx);
    ifs.close();
    ofs.close();

    return true;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bool decrypt(const std::string& inputFile, const std::string& outputFile, const std::string& password) {
    unsigned char key[KEY_LENGTH], iv[IV_LENGTH];

    std::ifstream ifs(inputFile, std::ios::binary);
    std::ofstream ofs(outputFile, std::ios::binary);

    if (!ifs || !ofs) {
        std::cerr << "Error opening files!" << std::endl;
        return false;
    }

    // –ß—Ç–µ–Ω–∏–µ IV –∏–∑ —Ñ–∞–π–ª–∞
    ifs.read((char*)iv, IV_LENGTH);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è
    if (!generateKey(password, key, iv)) {
        handleErrors();
        return false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx || !EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), nullptr, key, iv)) {
        handleErrors();
    }

    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    unsigned char buffer[1024];
    unsigned char plaintext[1024 + EVP_CIPHER_block_size(EVP_aes_256_cbc())];
    int bytesRead, plaintext_len;

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    while ((bytesRead = ifs.readsome((char*)buffer, sizeof(buffer))) > 0) {
        if (!EVP_DecryptUpdate(ctx, plaintext, &plaintext_len, buffer, bytesRead)) {
            handleErrors();
        }
        ofs.write((char*)plaintext, plaintext_len);
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    if (!EVP_DecryptFinal_ex(ctx, plaintext, &plaintext_len)) {
        handleErrors();
    }
    ofs.write((char*)plaintext, plaintext_len);

    EVP_CIPHER_CTX_free(ctx);
    ifs.close();
    ofs.close();

    return true;
}
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
int main(int argc, char* argv[]) {
    int opt;
    std::string inputFile, outputFile, password;
    bool isEncrypt = true;

    while ((opt = getopt(argc, argv, "edp:i:o:")) != -1) {
        switch (opt) {
            case 'e': isEncrypt = true; break;
            case 'd': isEncrypt = false; break;
            case 'p': password = optarg; break;
            case 'i': inputFile = optarg; break;
            case 'o': outputFile = optarg; break;
            default:
                std::cerr << "Usage: " << argv[0] << " [-e|-d] -p <password> -i <inputFile> -o <outputFile>" << std::endl;
                return 1;
        }
    }

    if (inputFile.empty() ‚†µ‚†ü‚†µ‚†û‚†µ‚†û‚†ü‚†∫‚†ü‚†µ‚†µ‚†ü‚†∫‚†ü‚†µ‚†ü‚†û‚†µ‚†∫‚†ü password.empty()) {
        std::cerr << "Missing required arguments!" << std::endl;
        return 1;
    }

    if (isEncrypt) {
        if (encrypt(inputFile, outputFile, password)) {
            std::cout << "File encrypted successfully." << std::endl;
        } else {
            std::cerr << "Encryption failed!" << std::endl;
        }
    } else {
        if (decrypt(inputFile, outputFile, password)) {
            std::cout << "File decrypted successfully." << std::endl;
        } else {
            std::cerr << "Decryption failed!" << std::endl;
        }
    }

    return 0;
}
